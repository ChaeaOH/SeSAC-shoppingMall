{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport cartSlice from './cart/cartSlice';\nimport userSlice from './user/userSlice';\nimport storage from \"redux-persist/lib/storage\"; //로컬스토리지 \n//import storageSession from\"redux-persist/lib/storage/session\"; //세션스토리지\n\nimport { persistReducer } from 'redux-persist'; //리듀서가 실행될때 persist 를 같이 사용하게 묶어서 사용\n\nconst persistConfig = {\n  key: 'root',\n  //  localStorage에 저장될 때의 key값.\n  storage\n};\nconst rootReducer = combineReducers({\n  cart: cartSlice,\n  user: userSlice\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // rootReducer와 persist를 묶어서 사용.\n//redux-persist를 사용해서  로컬스토리지에 state 저장하면 페이지가 새로고침 되어도 initialState 값이\n//로컬스토리지에 저장된 state 값으로 대체되기 때문에 초기화 되지 않는다.\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","cartSlice","userSlice","storage","persistReducer","persistConfig","key","rootReducer","cart","user","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck"],"sources":["/Users/chaea/새싹/react12-main/src/store/index.js"],"sourcesContent":["import { configureStore,combineReducers } from '@reduxjs/toolkit'\nimport cartSlice from './cart/cartSlice'\nimport userSlice from './user/userSlice'\nimport storage from \"redux-persist/lib/storage\"; //로컬스토리지 \n//import storageSession from\"redux-persist/lib/storage/session\"; //세션스토리지\nimport { persistReducer } from 'redux-persist'; \n//리듀서가 실행될때 persist 를 같이 사용하게 묶어서 사용\n\nconst persistConfig = {\n  key: 'root',  //  localStorage에 저장될 때의 key값.\n  storage,\n}\n\nconst rootReducer = combineReducers({\n  cart:cartSlice,\n  user:userSlice\n})\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n// rootReducer와 persist를 묶어서 사용.\n//redux-persist를 사용해서  로컬스토리지에 state 저장하면 페이지가 새로고침 되어도 initialState 값이\n//로컬스토리지에 저장된 state 값으로 대체되기 때문에 초기화 되지 않는다.\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: false,\n  })\n})\n\nexport default store;"],"mappings":"AAAA,SAASA,cAAT,EAAwBC,eAAxB,QAA+C,kBAA/C;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAiD;AACjD;;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CACA;;AAEA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MADe;EACN;EACdH;AAFoB,CAAtB;AAKA,MAAMI,WAAW,GAAGP,eAAe,CAAC;EAClCQ,IAAI,EAACP,SAD6B;EAElCQ,IAAI,EAACP;AAF6B,CAAD,CAAnC;AAIA,MAAMQ,gBAAgB,GAAGN,cAAc,CAACC,aAAD,EAAgBE,WAAhB,CAAvC,C,CACA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAGZ,cAAc,CAAC;EAC3Ba,OAAO,EAAEF,gBADkB;EAE3BG,UAAU,EAAGC,oBAAD,IAA0BA,oBAAoB,CAAC;IACzDC,iBAAiB,EAAE;EADsC,CAAD;AAF/B,CAAD,CAA5B;AAOA,eAAeJ,KAAf"},"metadata":{},"sourceType":"module"}